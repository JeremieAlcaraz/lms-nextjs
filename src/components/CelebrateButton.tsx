'use client' // Indique que ce composant s'ex√©cute c√¥t√© client (Next.js 13+ avec App Router)

// Import du bouton shadcn/ui
import { Button } from './ui/button'

// Import de canvas-confetti
import confetti from 'canvas-confetti'

// Import de React
import React from 'react'

// Interface des props du composant
interface CelebrateButtonProps {
  children: React.ReactNode           // Ce qu‚Äôon met √† l‚Äôint√©rieur du bouton
  soundUrl?: string                   // (optionnel) URL du son √† jouer au clic
}

export function CelebrateButton({
  children,
  soundUrl = '/sounds/celebrate.wav', // Par d√©faut, on utilise ce fichier audio
}: CelebrateButtonProps) {
  // On cr√©e une r√©f√©rence vers le bouton DOM pour r√©cup√©rer sa position plus tard
  const buttonRef = React.useRef<HTMLButtonElement | null>(null)

  const handleClick = () => {
    // üîä 1. Joue le son de c√©l√©bration
    const audio = new Audio(soundUrl)
    audio.play()

    // üìç 2. R√©cup√®re les coordonn√©es du bouton sur l'√©cran
    const rect = buttonRef.current?.getBoundingClientRect()
    if (!rect) return // Si jamais on ne trouve pas le bouton, on arr√™te l√†

    // üé® 3. Cr√©e un <canvas> temporaire qui couvre tout l‚Äô√©cran (pour dessiner les confettis dessus)
    const canvas = document.createElement('canvas')
    canvas.style.position = 'fixed'
    canvas.style.top = '0'
    canvas.style.left = '0'
    canvas.style.width = '100%'
    canvas.style.height = '100%'
    canvas.style.pointerEvents = 'none' // Permet de ne pas bloquer les clics
    canvas.style.zIndex = '9999' // Tr√®s au-dessus de tout le reste
    document.body.appendChild(canvas) // Ajout du canvas dans la page

    // ‚ú® 4. Initialise une instance de confetti personnalis√©e sur ce canvas
    const myConfetti = confetti.create(canvas, { 
      resize: true,       // Le canvas s‚Äôajuste √† la taille de la fen√™tre automatiquement
      useWorker: true     // Utilise un "Web Worker" pour √©viter de bloquer l‚Äôinterface
    })

    // üß≠ 5. Calcule la position "centrale" du bouton en pourcentage de l'√©cran
    const x = rect.left + rect.width / 2
    const y = rect.top + rect.height / 2

    // üéâ 6. Lance l'explosion de confettis √† la position du bouton
    myConfetti({
      particleCount: 80,       // Nombre de particules
      startVelocity: 30,       // Vitesse initiale
      spread: 360,             // Dispersion totale (360¬∞)
      ticks: 60,               // Dur√©e de vie des particules
      origin: {
        x: x / window.innerWidth,     // Position X en % de la largeur √©cran
        y: y / window.innerHeight,    // Position Y en % de la hauteur √©cran
      },
    })

    // üßπ 7. Supprime le canvas apr√®s 1 seconde (nettoyage propre)
    setTimeout(() => {
      canvas.remove()
    }, 1000)
  }

  return (
    // üñ±Ô∏è Le bouton shadcn qui d√©clenche la magie au clic
    <Button ref={buttonRef} onClick={handleClick}>
      {children}
    </Button>
  )
}
